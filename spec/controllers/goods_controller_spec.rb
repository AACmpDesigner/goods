require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe GoodsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Good. As you add validations to Good, be sure to
  # adjust the attributes here as well.
  good_params = YAML.load_file(
    "#{fixture_path}/goods.yml"
  ).with_indifferent_access

  sale_params = YAML.load_file(
    "#{fixture_path}/sales.yml"
  ).with_indifferent_access

  let(:valid_attributes) do
    valid_params = good_params[:valid_params].deep_dup
    valid_params[:title] = valid_params[:title] + Time.now.to_i.to_s
    valid_params
  end

  let(:invalid_attributes) do
    good_params[:title_blank]
  end

  let(:sale_valid_attributes) do
    sale_params[:valid_params]
  end

  let(:sale_invalid_attributes) do
    sale_params[:blank_price]
  end

  describe 'GET #index' do
    it 'returns a success response' do
      Good.create! valid_attributes
      get :index, params: {}
      expect(response).to be_successful
      should render_template('index')
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      good = Good.create! valid_attributes
      get :show, params: { id: good.to_param }
      expect(response).to be_successful
      should render_template('show')
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}
      expect(response).to be_successful
      should render_template('new')
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      good = Good.create! valid_attributes
      get :edit, params: { id: good.to_param }
      expect(response).to be_successful
      should render_template('edit')
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Good' do
        expect do
          post :create, params: { good: valid_attributes }
        end.to change(Good, :count).by(1)
      end

      it 'redirects to the created good' do
        post :create, params: { good: valid_attributes }
        expect(response).to redirect_to(Good.last)
        should redirect_to(good_path(Good.last))
      end
    end

    context 'with invalid params' do
      it 'returns a success response' do
        post :create, params: { good: invalid_attributes }
        expect(response).to be_successful
        should render_template('new')
      end
      it 'returns a success response with new_sales_attributes' do
        post :create, params: {
          good: valid_attributes.merge(
            new_sales_attributes: { '0': sale_invalid_attributes }
          )
        }
        expect(response).to be_successful
        should render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      it 'updates the requested good' do
        good = Good.create! valid_attributes
        new_att = valid_attributes
        put :update, params: { id: good.to_param, good: new_att }
        good.reload
        expect(good.title).to eq new_att[:title]
      end

      it 'redirects to the good' do
        good = Good.create! valid_attributes
        put :update, params: { id: good.to_param, good: valid_attributes }
        expect(response).to redirect_to(good)
        should redirect_to(good_path(good))
      end
    end

    context 'with invalid params' do
      it 'returns a success response' do
        good = Good.create! valid_attributes
        put :update, params: { id: good.to_param, good: invalid_attributes }
        expect(response).to be_successful
        should render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested good' do
      good = Good.create! valid_attributes
      expect do
        delete :destroy, params: { id: good.to_param }
      end.to change(Good, :count).by(-1)
    end

    it 'redirects to the goods list' do
      good = Good.create! valid_attributes
      delete :destroy, params: { id: good.to_param }
      expect(response).to redirect_to(goods_url)
      should redirect_to(goods_url)
    end
  end
end
