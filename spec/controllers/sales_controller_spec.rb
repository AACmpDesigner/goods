require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe SalesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Sale. As you add validations to Sale, be sure to
  # adjust the attributes here as well.
  good_params = YAML.load_file(
    "#{fixture_path}/goods.yml"
  ).with_indifferent_access
  sale_params = YAML.load_file(
    "#{fixture_path}/sales.yml"
  ).with_indifferent_access

  let(:valid_attributes) do
    sale_params[:valid_params]
  end

  let(:valid_date_request) do
    {
      from: '2017-03-01',
      to: '2017-03-01'
    }
  end

  let(:blank_from_date_request) do
    {
      from: '',
      to: '2017-03-01'
    }
  end

  let(:blank_to_date_request) do
    {
      from: '2017-03-01',
      to: ''
    }
  end

  let(:from_greater_than_to_request) do
    {
      from: '2017-03-02',
      to: '2017-03-01'
    }
  end

  let(:invalid_date_request) do
    {
      from: '2017/03/02',
      to: '2017-03-01'
    }
  end

  let(:good_valid_attributes) do
    valid_params = good_params[:valid_params].deep_dup
    valid_params[:title] = valid_params[:title] + Time.now.to_i.to_s
    valid_params
  end

  describe 'GET #index' do
    it 'returns a success response' do
      good = Good.create! good_valid_attributes
      good.sales.create! valid_attributes
      get :index, params: valid_date_request
      expect(response).to be_successful
    end
    it 'returns from param is blank' do
      good = Good.create! good_valid_attributes
      good.sales.create! valid_attributes
      get :index, params: blank_from_date_request
      expect(response).to have_http_status(:unprocessable_entity)
    end
    it 'returns to param is blank' do
      good = Good.create! good_valid_attributes
      good.sales.create! valid_attributes
      get :index, params: blank_to_date_request
      expect(response).to have_http_status(:unprocessable_entity)
    end
    it 'returns param from greater than param to' do
      good = Good.create! good_valid_attributes
      good.sales.create! valid_attributes
      get :index, params: from_greater_than_to_request
      expect(response).to have_http_status(:unprocessable_entity)
    end
    it 'returns invalid date format' do
      good = Good.create! good_valid_attributes
      good.sales.create! valid_attributes
      get :index, params: invalid_date_request
      expect(response).to have_http_status(:unprocessable_entity)
    end
  end
end
