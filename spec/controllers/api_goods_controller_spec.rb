require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::GoodsController, type: :controller do
  before :each do
    allow(controller).to receive(:authenticate_api_user!).and_return(true)
  end

  good_params = YAML.load_file(
    "#{fixture_path}/goods.yml"
  ).with_indifferent_access
  sale_params = YAML.load_file(
    "#{fixture_path}/sales.yml"
  ).with_indifferent_access

  let(:valid_attributes) do
    valid_params = good_params[:valid_params].deep_dup
    valid_params[:title] = valid_params[:title] + Time.now.to_i.to_s
    valid_params
  end
  let(:invalid_attributes) do
    good_params[:title_blank]
  end
  let(:sale_valid_attributes) do
    sale_params[:valid_params]
  end
  let(:sale_invalid_attributes) do
    sale_params[:blank_price]
  end

  describe 'GET #index' do
    it 'returns a success response' do
      Good.create! valid_attributes
      get :index, params: {}, format: :json
      expect(response).to be_successful
      should render_template('index')
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      good = Good.create! valid_attributes
      get :show, params: { id: good.to_param }, format: :json
      expect(response).to be_successful
      should render_template('show')
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, format: :json
      expect(response).to be_successful
      should render_template('new')
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      good = Good.create! valid_attributes
      get :edit, params: { id: good.to_param }, format: :json
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Good' do
        expect do
          post :create, params: valid_attributes, format: :json
        end.to change(Good, :count).by(1)
      end

      it 'returns a success response' do
        post :create, params: valid_attributes, format: :json
        expect(response).to have_http_status(:created)
        should render_template('show')
      end
    end
    context 'with invalid params' do
      it 'not created a new Good' do
        post :create, params: invalid_attributes, format: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it 'not created a new Good with sales' do
        post :create, params: valid_attributes.merge(
          sales: [sale_invalid_attributes]
        ), format: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      it 'updates the requested good' do
        good = Good.create! valid_attributes
        new_att = valid_attributes.deep_dup
        new_att[:title] = new_att[:title] + 'abc'
        new_att[:id] = good.id
        put :update, params: new_att, format: :json
        good.reload
        expect(good.title).to eq new_att[:title]
        expect(response).to have_http_status(:ok)
        should render_template('show')
      end
      it 'updates the requested good with sales' do
        good = Good.create! valid_attributes
        sale_new = good.sales
                       .create!(sale_valid_attributes)
                       .attributes
                       .with_indifferent_access
                       .slice(:id, :date_of_sale, :price)
        sale_new[:price] = 500
        sale_destroy = good.sales
                           .create!(sale_new.except(:id))
                           .attributes
                           .with_indifferent_access
                           .slice(:id, :date_of_sale, :price)
        sale_destroy[:_destroy] = true
        new_att = {
          id: good.id,
          sales: [sale_new, sale_destroy, sale_valid_attributes]
        }
        put :update, params: new_att, format: :json
        expect(response).to have_http_status(:ok)
      end
    end
    context 'with invalid params' do
      it 'no updates the requested good' do
        good = Good.create! valid_attributes
        new_att = invalid_attributes
        new_att[:id] = good.id
        put :update, params: new_att, format: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
      it 'no updates the requested good with new sales invalid' do
        good = Good.create! valid_attributes
        new_att = { id: good.id, sales: [sale_invalid_attributes] }
        put :update, params: new_att, format: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
      it 'no updates the requested good with exist sales' do
        good = Good.create! valid_attributes
        new_att = {
          id: good.id,
          sales: [sale_invalid_attributes.merge(id: -1)]
        }
        put :update, params: new_att, format: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested good' do
      good = Good.create! valid_attributes
      expect do
        delete :destroy, params: { id: good.to_param }, format: :json
      end.to change(Good, :count).by(-1)
    end

    it 'returns a success response' do
      good = Good.create! valid_attributes
      delete :destroy, params: { id: good.to_param }, format: :json
      expect(response).to have_http_status(:no_content)
    end
  end

  describe 'GET #sales' do
    it 'returns a success response' do
      good = Good.create! valid_attributes
      get :sales, params: { id: good.to_param }, format: :json
      expect(response).to be_successful
      should render_template('sales')
    end
  end

  describe 'GET #sale' do
    it 'returns a success response' do
      good = Good.create! valid_attributes
      sale = good.sales.create! sale_valid_attributes
      get :sale, params: {
        id: good.to_param, sale_id: sale.id
      }, format: :json
      expect(response).to be_successful
      should render_template('sale')
    end
  end
end
